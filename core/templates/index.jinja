<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>System Dashboard</title>
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            background: #f4f6f8;
            color: #333;
            margin: 20px;
        }

        h1 {
            text-align: center;
            color: #222;
        }

        details {
            margin-bottom: 12px;
            border-radius: 6px;
            background: #ffffff;
            border: 1px solid #ddd;
        }

        summary {
            font-weight: 600;
            cursor: pointer;
            font-size: 16px;
            padding: 10px 14px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            background-color: #f9fafb;
            border-bottom: 1px solid #ddd;
        }

        summary:hover {
            background-color: #f1f3f5;
        }

        .indent {
            padding: 10px 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 12px;
        }

        th, td {
            padding: 10px 12px;
            text-align: left;
        }

        th {
            background: #f1f3f5;
            border-bottom: 2px solid #ccc;
        }

        tr {
            background: #ffffff;
            border-bottom: 1px solid #eee;
        }

        tr:hover {
            background-color: #f0f4f8;
            cursor: pointer;
        }

        .status-dot {
            height: 10px;
            width: 10px;
            border-radius: 50%;
            display: inline-block;
            margin-left: 6px;
        }

        .dot-green { background-color: #4caf50; }
        .dot-orange { background-color: #ff9800; }
        .dot-red { background-color: #f44336; }
        .dot-grey { background-color: #9e9e9e; }

        .usage-bar {
            width: 100%;
            height: 10px;
            background: #e0e0e0;
            border-radius: 5px;
            overflow: hidden;
        }

        .usage-fill {
            height: 100%;
            transition: width 0.3s ease;
        }

        .usage-green { background-color: #4caf50; }
        .usage-orange { background-color: #ff9800; }
        .usage-red { background-color: #f44336; }

        .status-summary {
            display: flex;
            gap: 4px;
            margin-left: auto;
        }
    </style>
</head>
<body>
    <h1>System Dashboard</h1>

    <div style="text-align: right; margin-bottom: 20px;">
        <a href="{{ url_for('admin') }}" class="btn-inline">Admin</a>
    </div>

    {% macro usage_bar(system, kind) %}
        {% if kind == 'cpu' %}
            {% set percent = system.cpu.usage_pct %}
        {% else %}
            {% set total = system.memory.total_gib or 1 %}
            {% set percent = (system.memory.used_gib / total) * 100 %}
        {% endif %}
        {% if percent <= 70 %}
            {% set color = "usage-green" %}
        {% elif percent <= 90 %}
            {% set color = "usage-orange" %}
        {% else %}
            {% set color = "usage-red" %}
        {% endif %}
        <div class="usage-bar" id="{{ kind }}-bar-{{ system.id }}">
            <div class="usage-fill {{ color }}" style="width: {{ percent }}%;" id="{{ kind }}-fill-{{ system.id }}"></div>
        </div>
    {% endmacro %}

    {% macro status_dot(system) %}
        {% if system.critical %}
            <span class="status-dot dot-red" id="status-{{ system.id }}"></span>
        {% elif system.warning %}
            <span class="status-dot dot-orange" id="status-{{ system.id }}"></span>
        {% elif system.connected %}
            <span class="status-dot dot-green" id="status-{{ system.id }}"></span>
        {% else %}
            <span class="status-dot dot-grey" id="status-{{ system.id }}"></span>
        {% endif %}
    {% endmacro %}

    {% macro status_summary(systems, id_prefix="") %}
        <span class="status-summary" id="{{ id_prefix }}">
            {% for s in systems %}
                {% if s.critical %}
                    <span class="status-dot dot-red"></span>
                {% elif s.warning %}
                    <span class="status-dot dot-orange"></span>
                {% elif s.connected %}
                    <span class="status-dot dot-green"></span>
                {% else %}
                    <span class="status-dot dot-grey"></span>
                {% endif %}
            {% endfor %}
        </span>
    {% endmacro %}

    {% for provider in providers %}
    <details>
        <summary>
            üåê Provider: {{ provider.name }}
            {{ status_summary(provider.sites | map(attribute='systems') | sum(start=[]), 'summary-provider-' ~ provider.name) }}
        </summary>
        <div class="indent">
            {% for site in provider.sites %}
            <details>
                <summary>
                    üè¢ Site: {{ site.name }} ({{ site.type }}) ‚Äî {{ site.geoname }}
                    {{ status_summary(site.systems, 'summary-site-' ~ site.name) }}
                </summary>
                <div class="indent">
                    {% set grouped_systems = {} %}
                    {% for sys in site.systems %}
                        {% set _ = grouped_systems.setdefault(sys.group, []).append(sys) %}
                    {% endfor %}

                    {% for group, systems in grouped_systems.items() %}
                    {% set group_id = 'summary-group-' ~ site.name ~ '-' ~ (group or 'ungrouped') %}
                    <details>
                        <summary>
                            üóÇÔ∏è Group: {{ group or "Ungrouped" }}
                            {{ status_summary(systems, group_id) }}
                        </summary>
                        <div class="indent">
                            <table>
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>CPU Load</th>
                                        <th>Memory Used</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {% for system in systems %}
                                    <tr onclick="window.open('/system?id={{ system.id }}', '_blank')">
                                        <td>{{ system.name }}</td>
                                        <td>{{ system.type }}</td>
                                        <td>{{ usage_bar(system, 'cpu') }}</td>
                                        <td>{{ usage_bar(system, 'mem') }}</td>
                                        <td>{{ status_dot(system) }}</td>
                                    </tr>
                                    {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </details>
                    {% endfor %}
                </div>
            </details>
            {% endfor %}
        </div>
    </details>
    {% endfor %}

    <script>
        function getDotClass(system) {
            if (system.critical) return 'dot-red';
            if (system.warning) return 'dot-orange';
            if (system.connected) return 'dot-green';
            return 'dot-grey';
        }

        function getUsageColor(percent) {
            if (percent <= 70) return 'usage-green';
            if (percent <= 90) return 'usage-orange';
            return 'usage-red';
        }

        function updateSystem(system) {
            const cpuFill = document.getElementById(`cpu-fill-${system.id}`);
            const memFill = document.getElementById(`mem-fill-${system.id}`);
            const status = document.getElementById(`status-${system.id}`);

            if (cpuFill) {
                const cpuPct = system.cpu.usage_pct;
                cpuFill.style.width = `${cpuPct}%`;
                cpuFill.className = `usage-fill ${getUsageColor(cpuPct)}`;
            }

            if (memFill) {
                const total = system.memory.total_gib || 1;
                const memPct = (system.memory.used_gib / total) * 100;
                memFill.style.width = `${memPct}%`;
                memFill.className = `usage-fill ${getUsageColor(memPct)}`;
            }

            if (status) {
                status.className = `status-dot ${getDotClass(system)}`;
            }
        }

        function updateSummary(id, systems) {
            const el = document.getElementById(id);
            if (!el) return;

            el.innerHTML = ''; // clear existing

            for (const s of systems) {
                const span = document.createElement('span');
                span.className = 'status-dot ' + getDotClass(s);
                el.appendChild(span);
            }
        }

        async function refreshDashboard() {
            try {
                const res = await fetch('/providers.json');
                const data = await res.json();

                for (const provider of data) {
                    let providerSystems = [];

                    for (const site of provider.sites) {
                        let siteSystems = [];
                        const groupMap = {};

                        for (const system of site.systems) {
                            updateSystem(system);

                            siteSystems.push(system);
                            providerSystems.push(system);

                            const groupKey = system.group || 'ungrouped';
                            groupMap[groupKey] = groupMap[groupKey] || [];
                            groupMap[groupKey].push(system);
                        }

                        updateSummary(`summary-site-${site.name}`, siteSystems);

                        for (const group in groupMap) {
                            updateSummary(`summary-group-${site.name}-${group}`, groupMap[group]);
                        }
                    }

                    updateSummary(`summary-provider-${provider.name}`, providerSystems);
                }
            } catch (err) {
                console.error('Dashboard update error:', err);
            }
        }

        setInterval(refreshDashboard, 5000);
        window.onload = refreshDashboard;
    </script>
</body>
</html>
